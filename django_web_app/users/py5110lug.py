import math
import datetime as dt

def py5110lug_calc(data_input):
#input data
        e=float(data_input['e'])
        R=float(data_input['R'])
        D=float(data_input['D'])
        t=float(data_input['t'])
        beta=float(data_input['beta'])
        theta=float(data_input['theta'])
        naxu=int(data_input['naxu'])
        Ntru=int(data_input['Ntru'])
        Ftuax=float(data_input['Ftuax'])
        Ftutr=float(data_input['Ftutr'])
        pi = 3.14159265358979
#Geometry     
        eod = e / D
        if eod <= 0.5: print(" - ************* - Error! Please,check your input!       e/D =",eod)
        Rod=R/D
#Calculate W/D and W
        if eod < Rod * (1 - math.sin(beta * pi / 180)):
          Wod = 2 * math.sqrt(2 * Rod * eod - eod * eod)
        else:
          Wod = 2*(eod * math.tan(pi*beta/180) + R/D *(1/math.cos(beta*pi/180) - math.tan(beta* pi/180)))
#
        Dot=D/t        
        if Dot < 0.8 or Dot > 5: print(" - - - - - - - - - Warning! Restriction:       0.8 <D/t=", Dot, "< 5.0")
#Select Material
        if naxu < 0 or naxu > 18:
            print(" - ************* - Error! Please,Enter correct table number for Kaxu - from 1 to 18")
            naxu = 0
        if Ntru < 0 or Ntru > 29:
            print(" - ************* - Error! Please,Enter correct table number for Ktru - from 1 to 29")
            Ntru = 0
#Factors
        Kaxu=0
        Ktru = 0
        if naxu > 0: Kaxu=funKaxu(Wod, eod, "KAXU", naxu)      
        if Ntru > 0: Ktru = Interpol(Wod, eod, "TR#22", Ntru)
#Result
        Paxu = Kaxu*(Wod-1)*D*t*Ftuax
        Ptru = Ktru*D*t*Ftutr
        PtruoPaxu=0
        Kqu=0
        if Ptru == 0 and theta == 0: Kqu=1
        if Paxu == 0 and theta == 90: Kqu=1
        if Paxu > 0 and Ptru > 0:
            PtruoPaxu = Ptru/Paxu
            z=(1/(math.cos(theta*pi/180)**1.6+(math.sin(theta*pi/180)/PtruoPaxu)**1.6))**(5/8)
            Kqu=z.real
        Pqu = Kqu*Paxu
#data to table     
        W=Wod*D
        data_output = {
            'e': e,
            'R': R,
            'D': D,
            't': t,
            'beta': beta,
            'theta': theta,
            'naxu': naxu,
            'Ntru': Ntru,
            'Ftuax': int(Ftuax),
            'Ftutr': int(Ftutr),
            'W': round(W, 3),
            'eod': round(eod, 3),
            'Rod': round(Rod, 3),
            'Wod': round(Wod, 3),
            'Dot': round(Dot, 3),
            'Kaxu': round(Kaxu, 3),
            'Ktru': round(Ktru, 3),
            'Paxu': int(Paxu),
            'Ptru': int(Ptru),
            'PtruoPaxu': round(PtruoPaxu, 3),
            'Kqu': round(Kqu, 3),
            'Pqu': int(Pqu),
            'datatime': "Calculated http:xxxxxxxxxxxxx.xxxx.ru "+str(dt.datetime.today())[0:19],
        }
        return data_output

def funKaxu(Wod, eod, textKAXU, naxu):
	Kaxu=0.717
	null=""
	card=[null
		,[null,[null,7]	
			,[null,0.5,0.75,1,1.25,1.5,2,2.45]
			,[null,0,0.445,0.835,1.165,1.44,1.815,2]
			,[null,3.2,null]
			,[null,0.033333,null,null,null]]
		,[null,[null,5]	
			,[null,0.5,0.75,1,1.5,2]
			,[null,0,0.445,0.835,1.27,1.52]
			,[null,3.2,null]
			,[null,0.033333,null,null,null]]
		,[null,[null,4]	
			,[null,0.5,0.75,1,1.5]
			,[null,0,0.445,0.835,1.095]
			,[null,3.2,null]
			,[null,0.033333,null,null,null]]
		,[null,[null,7]	
			,[null,0.5,0.75,1,1.25,1.5,2,2.45]
			,[null,0,0.445,0.835,1.165,1.44,1.815,2]
			,[null,3.4,null]
			,[null,0.066667,null,null,null]]
		,[null,[null,4]	
			,[null,0.5,0.75,1,1.5]
			,[null,0,0.445,0.835,1.095]
			,[null,3.4,null]
			,[null,0.066667,null,null,null]]
		,[null,[null,7]	
			,[null,0.5,0.75,1,1.25,1.5,2,2.45]
			,[null,0,0.445,0.835,1.165,1.44,1.815,2]
			,[null,3.8,null]
			,[null,0.1,null,null,null]]
		,[null,[null,5]	
			,[null,0.5,0.75,1,1.5,2]
			,[null,0,0.445,0.835,1.27,1.52]
			,[null,3.8,null]
			,[null,0.1,null,null,null]]
		,[null,[null,4]	
			,[null,0.5,0.75,1,1.5]
			,[null,0,0.445,0.835,1.095]
			,[null,3.8,null]
			,[null,0.1,null,null,null]]
		,[null,[null,6]	
			,[null,0.5,0.75,1,1.25,1.5,2]
			,[null,0,0.445,0.835,1.165,1.44,1.815]
			,[null,4.4,null]
			,[null,0.26667,null,null,null]]
		,[null,[null,5]	
			,[null,0.5,0.75,1,1.5,2]
			,[null,0,0.445,0.835,1.27,1.52]
			,[null,4.4,null]
			,[null,0.26667,null,null,null]]
		,[null,[null,4]	
			,[null,0.5,0.75,1,1.5]
			,[null,0,0.445,0.835,1.095]
			,[null,4.4,null]
			,[null,0.26667,null,null,null]]
		,[null,[null,7]	
			,[null,0.5,0.75,0.8,1,1.5,2,2.45]
			,[null,0,0.445,0.53,0.835,1.095,1.815,2]
			,[null,2.4,5]
			,[null,0.3,0.0239,0.2962,1.1568]]
		,[null,[null,8]	
			,[null,0.5,0.75,1,1.25,1.5,1.75,2,2.5]
			,[null,0,0.4,0.77,1.095,1.39,1.63,1.81,1.98]
			,[null,3.4,null]
			,[null,0.033333,null,null,null]]
		,[null,[null,9]	
			,[null,0.5,0.75,1,1.25,1.5,1.75,2,2.5,3]
			,[null,0,0.4,0.77,1.095,1.34,1.545,1.69,1.845,1.93]
			,[null,3.4,null]
			,[null,0.066667,null,null,null]]
		,[null,[null,8]	
			,[null,0.5,0.75,1,1.25,1.5,1.75,2,2.5]
			,[null,0,0.4,0.77,1.095,1.39,1.63,1.81,1.98]
			,[null,3.7,null]
			,[null,0.1,null,null,null]]
		,[null,[null,8]	
			,[null,0.5,0.75,1,1.25,1.5,1.75,2,2.5]
			,[null,0,0.4,0.77,1.095,1.39,1.63,1.81,1.98]
			,[null,4.4,null]
			,[null,0.133333,null,null,null]]
		,[null,[null,7]	
			,[null,0.5,0.75,1,1.25,1.5,1.75,2]
			,[null,0,0.4,0.77,1.095,1.39,1.63,1.81]
			,[null,2.5,4.6]
			,[null,1.066667,0.022,0.2773,1.2769]]
		,[null,[null,9]	
			,[null,0.5,0.75,1,1.25,1.5,1.75,2,2.5,3]
			,[null,0,0.4,0.8,1.18,1.5,1.74,1.9,2.045,2.09]
			,[null,3.3,null]
			,[null,0.033333,null,null,null]]
        ,null]
#Number of eod_rapper points		
	Max_Col=card[naxu][1][1]
	First_Limit=card[naxu][4][1]
	Second_Limit=card[naxu][4][2]
	Kt1=card[naxu][5][1]
	Kt11=card[naxu][5][2]
	Kt2=card[naxu][5][3]
	Kt3=card[naxu][5][4]
#Kt Calculate
	Kt = 1000
	if Wod <= First_Limit:
	   Kt = 1 - Kt1 * (Wod - 1)
	else:
	   if naxu == 12 or naxu == 17:
	      if Wod <= Second_Limit: Kt = Kt11 * Wod * Wod - Kt2 * Wod + Kt3
	x = card[naxu][2][:]
	Y = card[naxu][3][:]
	ypl = 1E+37
	ypn = 1E+37
	print(Kt,ypn)
	print(x)
	print("\n")
	print(Y)
	y2 = Spline(x, Y, Max_Col, ypl, ypn)
	if eod > x[Max_Col]:
	   eod_test = x[Max_Col]
	else:
	   eod_test = eod
	Ksb= Splint(x, Y, y2, Max_Col, eod_test)
	if Wod == 1:
	   Ksb = 10000000000
	else:
	   Ksb = Ksb / (Wod - 1)
	if Kt < Ksb:
	   Kaxu = Kt
	else:
	   Kaxu = Ksb
	return Kaxu

def Spline(x, Y, n, ypl, ypn):
#Given arrays x(1..n) and y(1..n) containing a tabulated function, i.e., yi = f(xi), with
#x1 <x2 < :: : < xN, and given values yp1 and ypn for the first derivative of the interpolating
#function at points 1 and n, respectively, this routine returns an array y2(1..n) that contains
#the second derivatives of the interpolating function at the tabulated points xi. If yp1 and/or
#ypn are equal to 1 1030 or larger, the routine is signaled to set the corresponding boundary
#condition for a natural spline, with zero second derivative on that boundary.
#u=vector(1,n-1);
    y2=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
    u=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
    if ypl > 9.9E+29:
#      Then 'The lower boundary condition is set either to be \natural"
       y2[1] = 0
       u[1] = 0
    else:
#    '{ or else to have a specifed first derivative.
       y2[1] = -0.5
       u[1] = (3 / (x[2] - x[1])) * ((Y[2] - Y[1]) / (x[2] - x[1]) - ypl)
    for i in range(2, n):
        sig = (x[i] - x[i - 1]) / (x[i + 1] - x[i - 1])
        p = sig * y2[i - 1] + 2
        y2[i] = (sig - 1) / p
        u[i] = (Y[i + 1] - Y[i]) / (x[i + 1] - x[i]) - (Y[i] - Y[i - 1]) / (x[i] - x[i - 1])
        u[i] = (6 * u[i] / (x[i + 1] - x[i - 1]) - sig * u[i - 1]) / p
    if ypn > 9.9E+29:
#      Then ' The upper boundary condition is set either to be\natural"
       qn = 0
       un = 0#
    else:
       qn = 0.5
       un = (3/ (x[n] - x[n - 1])) * (ypn - (Y[n] - Y[n - 1]) / (x[n] - x[n - 1]))
    y2[n] = (un - qn * u[n - 1]) / (qn * y2[n - 1] + 1)
    k = n - 1
    while k >= 1:
#'For k = N - 1 To k >= 1 Step -1 ' This is the backsubstitution loop of the tridiagonal algorithm.
          y2[k] = y2[k] * y2[k + 1] + u[k]
          k = k - 1
    print(n, ypl, ypn)
    print("\n")
    print(y2)
    return y2
    
def Splint(Xa, ya, y2a, n, x):
#void splint(float xa(), float ya(), float y2a(), int n, float x, float *y)
#Given the arrays xa(1..n) and ya(1..n), which tabulate a function (with the xai's in order),
#and given the array y2a(1..n), which is the output from spline above, and given a value of
#x, this routine returns a cubic-spline interpolated value y.
    klo = 1
    khi = n
    while (khi - klo) > 1:
          k = int((khi + klo) / 2)
          if Xa[k] > x:
             khi = k
          else:
             klo = k
#         klo and khi now bracket the input value of x.
    h = Xa[khi] - Xa[klo]
#'if (h == 0.0) nrerror("Bad xa input to routine splint"); The xa's must be distinct.
    a = (Xa[khi] - x) / h
    b = (x - Xa[klo]) / h
#Cubic spline polynomial is now evaluated.
    Y = a*ya[klo]+b*ya[khi]+((a*a*a-a)*y2a[klo]+(b*b*b-b)*y2a[khi])*(h*h)/6
    print("\n")
    print(a,b,Y,klo,khi)
    return Y

def Interpol(Wod, eod, textTR22, Ntru):
    null=""
    card=["Wod/eod"
		,[3,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.09,0.137,0.158,0.161,0.163,0.165,0.166,0.168,0.169,0.17,0.173,0.176,0.179,0.18,0.181,0.182]
			,[1,0,0.09,0.137,0.158,0.164,0.17,0.175,0.18,0.184,0.187,0.19,0.196,0.2,0.203,0.206,0.208,0.21]]
		,[5,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.115,0.202,0.256,0.298,0.331,0.357,0.377,0.396,0.414,0.428,0.459,0.479,0.498,0.509,0.519,0.528]
			,[0.8,0,0.115,0.202,0.291,0.366,0.431,0.482,0.52,0.546,0.571,0.589,0.618,0.637,0.648,0.658,0.664,0.669]
			,[1,0,0.115,0.202,0.291,0.366,0.431,0.482,0.523,0.563,0.593,0.614,0.644,0.665,0.678,0.684,0.691,0.698]
			,[1.5,0,0.115,0.202,0.291,0.366,0.431,0.482,0.523,0.563,0.593,0.614,0.655,0.676,0.692,0.703,0.712,0.718]]
		,[4,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.14,0.207,0.24,0.262,0.276,0.284,0.289,0.294,0.299,0.302,0.31,0.316,0.319,0.32,0.32,0.32]
			,[0.8,0,0.14,0.22,0.262,0.288,0.3,0.31,0.318,0.326,0.333,0.338,0.35,0.36,0.366,0.372,0.378,0.38]
			,[1,0,0.14,0.22,0.262,0.288,0.3,0.31,0.322,0.332,0.341,0.347,0.36,0.37,0.38,0.386,0.394,0.4]]
		,[5,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.1,0.17,0.204,0.224,0.24,0.258,0.269,0.28,0.29,0.298,0.311,0.32,0.328,0.336,0.342,0.346]
			,[0.8,0,0.1,0.17,0.222,0.26,0.29,0.32,0.34,0.36,0.38,0.396,0.434,0.46,0.48,0.496,0.51,0.518]
			,[1,0,0.1,0.17,0.222,0.26,0.29,0.32,0.354,0.38,0.4,0.419,0.465,0.5,0.52,0.538,0.548,0.559]
			,[1.5,0,0.1,0.17,0.222,0.26,0.29,0.32,0.354,0.38,0.4,0.419,0.48,0.519,0.541,0.56,0.572,0.579]]
		,[4,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.1044,0.2045,0.2575,0.2855,0.3127,0.3326,0.3519,0.3676,0.383,0.3935,0.4107,0.4194,0.4268,0.4301,0.4329,0.436]
			,[0.8,0,0.1044,0.2045,0.2848,0.343,0.3851,0.4197,0.438,0.453,0.4638,0.4673,0.4765,0.4818,0.4893,0.4946,0.4984,0.4988]
			,[1,0,0.1044,0.2045,0.2848,0.343,0.3851,0.4197,0.438,0.453,0.4648,0.4715,0.4859,0.4966,0.5051,0.5124,0.5154,0.5231]]
		,[4,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.1201,0.213,0.2515,0.2786,0.2994,0.3156,0.3299,0.3411,0.3503,0.3582,0.3698,0.3781,0.3855,0.3907,0.3918,0.3925]
			,[0.8,0,0.1201,0.213,0.28,0.3249,0.3545,0.3792,0.3927,0.4047,0.4131,0.421,0.4354,0.4486,0.4586,0.4642,0.4689,0.4713]
			,[1,0,0.1201,0.213,0.28,0.3249,0.3545,0.3792,0.3971,0.4132,0.4257,0.4375,0.4546,0.4676,0.4739,0.4799,0.4848,0.4879]]
		,[3,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.12,0.1909,0.2219,0.2372,0.2484,0.2578,0.2649,0.2691,0.2723,0.2751,0.2793,0.282,0.2856,0.2872,0.2882,0.289]
			,[0.8,0,0.12,0.1909,0.2312,0.2525,0.265,0.2778,0.2871,0.2932,0.2991,0.3012,0.3075,0.3134,0.3178,0.3204,0.3241,0.3265]]
		,[5,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.0988,0.1701,0.2126,0.2445,0.2705,0.2902,0.3051,0.3191,0.3302,0.339,0.3612,0.3773,0.3892,0.3991,0.4071,0.4162]
			,[0.8,0,0.0988,0.1701,0.2313,0.285,0.3367,0.3742,0.402,0.4225,0.4412,0.46,0.4923,0.5174,0.5402,0.5587,0.578,0.5922]
			,[1,0,0.0988,0.1701,0.2313,0.285,0.3367,0.3742,0.4105,0.4376,0.465,0.4905,0.535,0.568,0.5898,0.6052,0.6172,0.6279]
			,[1.5,0,0.0988,0.1701,0.2313,0.285,0.3367,0.3742,0.4105,0.4376,0.465,0.4905,0.5449,0.5906,0.6192,0.6328,0.6427,0.6507]]
		,[4,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.1465,0.2168,0.2565,0.2837,0.3041,0.3215,0.3354,0.3455,0.352,0.3577,0.3671,0.3735,0.377,0.3795,0.3807,0.383]
			,[0.8,0,0.1465,0.2398,0.2957,0.3296,0.3503,0.364,0.3733,0.3829,0.3904,0.3975,0.4086,0.4175,0.4225,0.4273,0.4319,0.4338]
			,[1,0,0.1465,0.2398,0.2957,0.3296,0.3555,0.373,0.387,0.3973,0.4067,0.4137,0.4233,0.4315,0.4388,0.4429,0.4456,0.4485]]
		,[4,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.1406,0.2358,0.2824,0.3132,0.3368,0.3564,0.369,0.3807,0.3906,0.3972,0.4097,0.4214,0.4324,0.4377,0.4429,0.4445]
			,[0.8,0,0.1406,0.253,0.318,0.3652,0.3993,0.426,0.4428,0.4579,0.4721,0.481,0.4971,0.5085,0.5198,0.5245,0.5309,0.537]
			,[1,0,0.1406,0.253,0.318,0.3652,0.3993,0.4289,0.4527,0.4718,0.4889,0.4974,0.5182,0.5295,0.5382,0.5458,0.5516,0.5586]]
		,[6,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.1157,0.2025,0.2575,0.2868,0.3124,0.3374,0.3573,0.3748,0.3908,0.4031,0.4311,0.4527,0.4686,0.4812,0.4884,0.4999]
			,[0.8,0,0.1157,0.2025,0.2801,0.3397,0.3969,0.449,0.4834,0.5182,0.5485,0.5745,0.6438,0.6954,0.7419,0.7866,0.8261,0.8579]
			,[1,0,0.1157,0.2025,0.2801,0.3397,0.3969,0.449,0.4999,0.5454,0.5908,0.6351,0.7157,0.7854,0.848,0.9116,0.9639,1.0021]
			,[1.5,0,0.1157,0.2025,0.2801,0.3397,0.3969,0.449,0.4999,0.5454,0.5908,0.6351,0.7448,0.8484,0.9431,1.0305,1.0813,1.1037]
			,[2,0,0.1157,0.2025,0.2801,0.3397,0.3969,0.449,0.4999,0.5454,0.5908,0.6351,0.7448,0.8484,0.9431,1.0305,1.0991,1.1374]]
		,[3,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.0689,0.1061,0.1197,0.1236,0.125,0.1265,0.1273,0.128,0.129,0.13,0.1314,0.1315,0.1316,0.1317,0.1318,0.1328]
			,[0.8,0,0.0689,0.1061,0.1222,0.1257,0.1277,0.13,0.1321,0.134,0.1357,0.1369,0.1395,0.1416,0.1439,0.1459,0.1484,0.1503]]
		,[4,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.1143,0.1785,0.2052,0.216,0.223,0.2276,0.2325,0.2361,0.2393,0.2419,0.2479,0.25,0.2522,0.2531,0.2537,0.254]
			,[0.8,0,0.1143,0.1785,0.2144,0.2288,0.2387,0.2496,0.2575,0.262,0.267,0.271,0.2767,0.281,0.2868,0.2902,0.2915,0.2928]
			,[1,0,0.1143,0.1785,0.2144,0.2288,0.2387,0.2496,0.2575,0.265,0.2715,0.2778,0.2873,0.2948,0.3008,0.3037,0.3076,0.3106]]
		,[4,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.1393,0.236,0.2792,0.3119,0.3404,0.363,0.3835,0.3977,0.411,0.4238,0.4483,0.4652,0.4821,0.4917,0.5038,0.5124]
			,[0.8,0,0.1393,0.2399,0.3205,0.38,0.4306,0.473,0.5038,0.5264,0.5417,0.5562,0.589,0.6119,0.6302,0.6404,0.6482,0.6555]
			,[1,0,0.1393,0.2399,0.3205,0.38,0.4306,0.473,0.51,0.5394,0.5662,0.5866,0.6198,0.6411,0.6562,0.6637,0.6711,0.6757]]
		,[4,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.1401,0.233,0.2839,0.3182,0.3492,0.3777,0.4042,0.4301,0.4496,0.4689,0.5032,0.5305,0.5518,0.567,0.579,0.589]
			,[0.8,0,0.1401,0.2537,0.3371,0.4041,0.4775,0.5445,0.5893,0.6185,0.6447,0.6568,0.679,0.6915,0.6999,0.7089,0.7158,0.7208]
			,[1,0,0.1401,0.2537,0.3371,0.4041,0.4775,0.5445,0.5909,0.6306,0.6581,0.6731,0.6977,0.7116,0.7255,0.7395,0.7474,0.7533]]
		,[4,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.1519,0.2281,0.2582,0.2712,0.2794,0.2839,0.2884,0.2932,0.2976,0.2999,0.3066,0.3131,0.3196,0.3221,0.3274,0.33]
			,[0.8,0,0.1519,0.2281,0.268,0.2896,0.2997,0.311,0.3193,0.3231,0.3272,0.3312,0.337,0.3429,0.3479,0.3516,0.3559,0.3613]
			,[1,0,0.1519,0.2281,0.268,0.2896,0.2997,0.3118,0.3225,0.3303,0.3372,0.3448,0.3542,0.3629,0.3697,0.3754,0.3774,0.3803]]
		,[5,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.1425,0.233,0.2891,0.3266,0.3591,0.3819,0.3984,0.414,0.4227,0.4285,0.4416,0.4495,0.4551,0.459,0.4618,0.4638]
			,[0.8,0,0.1425,0.2549,0.338,0.3957,0.4265,0.4385,0.449,0.4601,0.4678,0.4766,0.4955,0.5058,0.516,0.5261,0.5357,0.5474]
			,[1,0,0.1425,0.2549,0.338,0.3957,0.4265,0.4455,0.463,0.4787,0.4899,0.4974,0.5183,0.5339,0.5442,0.555,0.5623,0.565]
			,[1.5,0,0.1425,0.2549,0.338,0.3957,0.4265,0.4455,0.463,0.4787,0.4911,0.499,0.5236,0.5465,0.5608,0.5722,0.5755,0.5767]]
		,[4,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.1358,0.1999,0.2331,0.2484,0.2576,0.2643,0.2716,0.2755,0.2778,0.2808,0.282,0.2835,0.2851,0.2883,0.2889,0.2892]
			,[0.8,0,0.1358,0.1999,0.24,0.2618,0.2752,0.285,0.2902,0.2933,0.297,0.2996,0.3056,0.3092,0.3144,0.318,0.321,0.3229]
			,[1,0,0.1358,0.1999,0.24,0.2618,0.2766,0.289,0.2947,0.2996,0.3031,0.3075,0.3157,0.3229,0.3299,0.3349,0.3386,0.3423]]
		,[4,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.165,0.2347,0.2761,0.2967,0.3085,0.3188,0.3263,0.3306,0.333,0.3346,0.3394,0.3438,0.3464,0.3484,0.3494,0.3501]
			,[0.8,0,0.165,0.2629,0.3047,0.3217,0.3349,0.3415,0.3463,0.352,0.3562,0.359,0.3698,0.3772,0.3847,0.3882,0.394,0.4007]
			,[1,0,0.165,0.2629,0.3047,0.3217,0.336,0.345,0.3545,0.3612,0.3673,0.3723,0.385,0.3943,0.4028,0.4111,0.4154,0.4209]]
		,[3,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.1102,0.1659,0.1983,0.2102,0.2146,0.2166,0.2182,0.2192,0.2213,0.2222,0.223,0.2259,0.2286,0.2297,0.2308,0.2317]
			,[0.8,0,0.1102,0.1659,0.1983,0.2135,0.222,0.2278,0.2312,0.236,0.2383,0.2425,0.2483,0.2536,0.2559,0.259,0.2629,0.264]]
		,[4,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.1618,0.2425,0.2948,0.3229,0.3411,0.3497,0.3586,0.3682,0.3747,0.38,0.391,0.3984,0.4034,0.4074,0.413,0.4166]
			,[0.8,0,0.1618,0.2534,0.3177,0.359,0.383,0.4008,0.4118,0.4197,0.4281,0.4349,0.4536,0.4648,0.4757,0.4815,0.4869,0.4897]
			,[1,0,0.1618,0.2534,0.3177,0.359,0.3832,0.4049,0.4227,0.4381,0.4499,0.4575,0.475,0.4857,0.493,0.4971,0.5009,0.5036]]
		,[5,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.126,0.207,0.26,0.301,0.334,0.357,0.382,0.403,0.42,0.439,0.475,0.496,0.516,0.532,0.55,0.562]
			,[0.8,0,0.126,0.217,0.311,0.382,0.447,0.514,0.56,0.608,0.642,0.677,0.758,0.829,0.884,0.933,0.987,1.035]
			,[1,0,0.126,0.217,0.311,0.382,0.447,0.514,0.571,0.64,0.696,0.752,0.858,0.949,1.029,1.099,1.16,1.216]
			,[1.5,0,0.126,0.217,0.311,0.382,0.447,0.514,0.571,0.64,0.696,0.752,0.882,1.024,1.142,1.252,1.316,1.355]]
		,[5,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.085,0.1786,0.2398,0.2739,0.3017,0.3229,0.3423,0.3608,0.3744,0.3843,0.4159,0.4421,0.4585,0.4766,0.4932,0.507]
			,[0.8,0,0.085,0.1786,0.2557,0.3298,0.3924,0.4414,0.4842,0.5274,0.5631,0.5922,0.6679,0.7278,0.7778,0.8202,0.8597,0.8951]
			,[1,0,0.085,0.1786,0.2557,0.3298,0.3924,0.4531,0.502,0.5594,0.6078,0.6548,0.7559,0.8279,0.8925,0.9387,0.9759,1.0152]
			,[1.5,0,0.085,0.1786,0.2557,0.3298,0.3924,0.4531,0.502,0.5594,0.6078,0.6548,0.7761,0.884,0.9781,1.03,1.0602,1.0668]]
		,[5,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.0597,0.1188,0.1674,0.1978,0.2173,0.2423,0.2569,0.2695,0.2807,0.2935,0.3199,0.3433,0.3588,0.3743,0.3892,0.3992]
			,[0.8,0,0.0597,0.1188,0.1799,0.2387,0.2926,0.3495,0.3875,0.4263,0.4599,0.4878,0.5652,0.6311,0.6907,0.7439,0.7973,0.8487]
			,[1,0,0.0597,0.1188,0.1799,0.2387,0.2926,0.3495,0.4108,0.466,0.5213,0.5626,0.6646,0.7555,0.8414,0.9094,0.9678,1.0073]
			,[1.5,0,0.0597,0.1188,0.1799,0.2387,0.2926,0.3495,0.4108,0.466,0.5213,0.5792,0.7095,0.844,0.9632,1.0364,1.0672,1.0755]]
		,[3,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.0775,0.129,0.1535,0.1627,0.1672,0.17,0.1717,0.1734,0.1749,0.1767,0.1798,0.1817,0.1823,0.1828,0.1831,0.1832]
			,[1,0,0.0775,0.129,0.1535,0.1627,0.1672,0.1709,0.1735,0.1759,0.1783,0.1807,0.1851,0.1895,0.1929,0.1946,0.1955,0.1964]]
		,[4,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.1314,0.2066,0.2612,0.2974,0.3321,0.3585,0.3797,0.3968,0.4102,0.4224,0.4433,0.4561,0.4654,0.4728,0.4805,0.4877]
			,[0.8,0,0.1314,0.2325,0.312,0.3645,0.4156,0.4476,0.4698,0.4897,0.5054,0.5212,0.5503,0.5672,0.5767,0.5854,0.591,0.5959]
			,[1,0,0.1314,0.2325,0.312,0.3645,0.4156,0.458,0.4878,0.5103,0.5335,0.5482,0.5794,0.5941,0.6,0.6048,0.6102,0.6131]]
		,[5,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.1175,0.2243,0.2672,0.3017,0.3314,0.3563,0.381,0.4022,0.4226,0.4388,0.4786,0.5025,0.5204,0.5368,0.5524,0.5634]
			,[0.8,0,0.1175,0.2243,0.3068,0.3804,0.4434,0.5004,0.5486,0.5942,0.6453,0.6849,0.7676,0.8329,0.8924,0.9472,0.9924,1.037]
			,[1,0,0.1175,0.2243,0.3068,0.3804,0.4434,0.5004,0.571,0.633,0.6925,0.752,0.8646,0.9495,1.0304,1.0926,1.1449,1.2027]
			,[1.5,0,0.1175,0.2243,0.3068,0.3804,0.4434,0.5004,0.571,0.633,0.6925,0.752,0.8952,1.0255,1.1439,1.221,1.2553,1.2704]]
		,[5,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.1191,0.2129,0.2616,0.297,0.3311,0.3597,0.3778,0.3995,0.4226,0.4388,0.4751,0.5037,0.5256,0.5432,0.5577,0.5653]
			,[0.8,0,0.1191,0.2162,0.3053,0.3782,0.4502,0.5064,0.5532,0.5979,0.6392,0.678,0.7641,0.829,0.8786,0.9113,0.9376,0.9582]
			,[1,0,0.1191,0.2162,0.3053,0.3782,0.4502,0.5165,0.5833,0.6464,0.7017,0.7607,0.8565,0.9209,0.9617,0.9841,0.9996,1.0149]
			,[1.5,0,0.1191,0.2162,0.3053,0.3782,0.4502,0.5165,0.5833,0.6464,0.7017,0.7607,0.8802,0.9546,0.9964,1.0186,1.0362,1.0469]]
		,[5,[17,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.25,2.5,2.75,3,3.25,3.5]	
			,[0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			,[0.6,0,0.1182,0.2067,0.2582,0.2989,0.3305,0.3575,0.3796,0.4004,0.4197,0.4358,0.4749,0.5009,0.5181,0.5346,0.5472,0.5589]
			,[0.8,0,0.1182,0.2283,0.3112,0.3838,0.4508,0.5017,0.5527,0.5967,0.6391,0.6762,0.7541,0.8024,0.829,0.8486,0.8613,0.8704]
			,[1,0,0.1182,0.2283,0.3112,0.3838,0.4508,0.515,0.5738,0.6333,0.6893,0.733,0.81,0.8497,0.8746,0.8894,0.8987,0.9092]
			,[1.5,0,0.1182,0.2283,0.3112,0.3838,0.4508,0.515,0.5738,0.6333,0.6893,0.743,0.83,0.8721,0.8952,0.9098,0.9218,0.9273]]
		,null]
#The data table		
    Max_Row=card[Ntru][0]
    Max_Col=card[Ntru][1][0]
    print("\n",Max_Row,Max_Col)
    x = card[Ntru][1][:]
    y = card[Ntru][1:2+Max_Row][:]
    print("\n",y)
    print("\n",Wod,eod)
    klo = 1
    khi = Max_Col
    while (khi - klo) > 1:
          k = int((khi + klo) / 2)
          if x[k] > Wod:
             khi = k
          else:
             klo = k
#         klo and khi now bracket the input value of x
    kx= klo
    klo = 1
    khi = Max_Row
    while (khi - klo) > 1:
          k = int((khi + klo) / 2)
          if y[k][0] > eod:
             khi = k
          else:
             klo = k
#         klo and khi now bracket the input value of eod
    ky= klo
    x0= x[kx]
    x1= x[kx+1]
    y00= y[ky][kx]
    y01= y[ky][kx+1]
    y10= y[ky+1][kx]
    y11= y[ky+1][kx+1]
    dx = x1-x0
    dy = y[ky+1][0]-y[ky][0]
#Spline plane is now evaluated
    a = Wod - x[kx]
    if a > dx: a=dx
    b = eod - y[ky][0]
    if b > dy: b=dy
    Ktru = y00+(y01-y00)*a/dx+(y10-y00)*b/dy+(y11+y00-y01-y10)*a*b/dx/dy
    print(x0,x1,"\n",y00,y01,"\n",y10,y11,"\n",dx,dy,"\n",a,b,Ktru)
    return Ktru
    
def tablenaxu(Material,Temper,Form,tb,Grain,GrainT,naxu,Ntru):
    Ncard=["Ncard"
		,[16,"195","T6","Al Alloy Casting","None",9,9,9,9,9,9,0,0,0,0,0,0]
		,[16,"222","T4","Al Alloy Casting","None",9,9,9,9,9,9,0,0,0,0,0,0]
		,[16,"356","T6","Al Alloy Casting","None",9,9,9,9,9,9,4,4,4,4,4,4]
		,[16,"2014","T6","Die Forging","None",1,1,1,1,12,12,5,5,0,0,0,0]
		,[16,"2014","T6","Hand Forging","A<=36",0,1,0,3,12,12,5,5,0,0,0,0]
		,[16,"2014","T6","Hand Forging","A>36",2,9,3,11,12,12,12,12,0,0,0,0]
		,[16,"2014","T6","Plate","t<=0.5",1,1,3,3,12,12,2,2,0,0,0,0]
		,[16,"2014","T6","Plate","0,5<t<=1,0",1,1,3,3,12,12,5,5,0,0,0,0]
		,[16,"2014","T6","Plate","t>1,0",6,6,8,8,12,12,7,7,0,0,0,0]
		,[16,"2024","T3","Plate","None",6,6,8,8,12,12,0,0,0,0,0,0]
		,[16,"2024","T351","Plate","None",6,6,8,8,12,12,0,0,0,0,0,0]
		,[16,"2024","T3511","EXTRUSION","None",4,4,4,4,4,4,0,0,0,0,0,0]
		,[16,"2024","T4","BAR","None",6,6,8,8,12,12,8,8,0,0,0,0]
		,[16,"2024","T4","EXTRUSION","None",4,4,4,4,4,4,6,6,0,0,0,0]
		,[16,"2024","T4","Plate","t<=0.5",6,6,8,8,12,12,11,11,0,0,0,0]
		,[16,"2024","T4","Plate","t>0.5",6,6,8,8,12,12,8,8,0,0,0,0]
		,[16,"2024","T42","EXTRUSION","None",4,4,4,4,4,4,6,6,0,0,0,0]
		,[16,"2024","T42","Plate","None",6,6,8,8,12,12,0,0,0,0,0,0]
		,[16,"2024","T6","Plate","None",4,4,5,5,12,12,6,6,0,0,0,0]
		,[16,"2024","T62","Plate","None",4,4,5,5,12,12,0,0,0,0,0,0]
		,[16,"7075","T6","BAR","None",1,12,0,12,12,12,0,0,0,0,0,0]
		,[16,"7075","T6","Die Forging","None",1,1,1,1,12,12,5,5,0,0,0,0]
		,[16,"7075","T6","EXTRUSION","None",1,1,1,1,1,1,5,5,0,0,0,0]
		,[16,"7075","T6","Hand Forging","A<=16",0,6,0,8,12,12,7,7,0,0,0,0]
		,[16,"7075","T6","Hand Forging","A<=36",2,0,3,0,12,12,0,0,0,0,0,0]
		,[16,"7075","T6","Hand Forging","A>16",0,9,0,11,12,12,12,12,0,0,0,0]
		,[16,"7075","T6","Hand Forging","A>36",7,0,8,0,12,12,0,0,0,0,0,0]
		,[16,"7075","T6","Plate","t<=0.5",1,1,3,3,12,12,2,2,0,0,0,0]
		,[16,"7075","T6","Plate","0,5<t<=1,0",1,1,3,3,12,12,5,5,0,0,0,0]
		,[16,"7075","T6","Plate","t>1,0",6,6,8,8,12,12,7,7,0,0,0,0]
		,[16,"7075","T73","BAR","None",1,12,3,12,12,12,0,0,0,0,0,0]
		,[16,"7075","T73","Die Forging","t<=3",4,4,5,5,6,6,0,14,13,13,14,0]
		,[16,"7075","T73","EXTRUSION","None",1,0,1,0,0,0,0,0,0,0,0,0]
		,[16,"7075","T73","Hand Forging","A<=16",0,6,0,8,12,12,0,0,0,0,0,0]
		,[16,"7075","T73","Hand Forging","A<=36",2,0,3,0,12,12,0,0,0,0,0,0]
		,[16,"7075","T73","Hand Forging","A>16",0,10,0,11,12,12,0,0,0,0,0,0]
		,[16,"7075","T73","Hand Forging","A>36",7,0,8,0,12,12,0,0,0,0,0,0]
		,[16,"7075","T73","Hand Forging","3,0<t<=4,0",0,0,0,0,12,12,13,0,1,1,0,13]
		,[16,"7075","T73","Hand Forging","t<=3",0,0,0,0,12,12,3,0,13,13,0,3]
		,[16,"7075","T73","Plate","t<=1,0",1,1,3,3,12,12,0,0,0,0,0,0]
		,[16,"7075","T73","Plate","t>1,0",6,6,8,8,12,12,0,0,0,0,0,0]
		,[16,"7075","T7351","Plate","t<=2,0",0,0,0,0,12,12,10,0,0,0,0,10]
		,[16,"7075","T76","H.S. CLAD PLATE","None",4,4,5,5,12,12,0,0,0,0,0,0]
		,[16,"7075","T7651","Plate","0,5<t<=1,0",0,0,0,0,12,12,9,9,9,9,9,9]
		,[16,"7075","T7651","Plate","t<=0.5",0,0,0,0,12,12,5,5,5,5,5,5]]
    naxu=0
    Ntru=0
    if Grain=="L" and GrainT=="LT": ng=1
    if Grain=="LT" and GrainT=="L": ng=2
    if Grain=="L" and GrainT=="ST": ng=3
    if Grain=="LT" and GrainT=="ST": ng=4
    if Grain=="ST" and GrainT=="L": ng=5
    if Grain=="ST" and GrainT=="LT": ng=6

    f = open('.\\otl.txt', 'w')

    for j in range(1, len(Ncard)):
        if Ncard[j][1]==Material and Ncard[j][2]==Temper and Ncard[j][3]==Form and (Ncard[j][4]==tb or Ncard[j][4]=="None"):
            naxu=Ncard[j][4+ng]
            Ntru=Ncard[j][10+ng]
        print (j,ng,naxu, Ntru)
        f.write(str(j)+"  "+str(ng)+"  "+str(naxu)+"  "+str(Ntru)+"\n")
    print (naxu, Ntru)
    f.close()
    return (naxu, Ntru)
def tableFtu(Material,Temper,Basis,tb,Grain,Ftu):
    Ftu=0
    B=0
    Mcard=["Base of material"
    ,[["SRM","2024","None","EXTRUSION","T42","mm","! EXTRUSION===EXTRUDED SHAPE !"]
	,["tb","1.2<a<=2.5","2.5<a<=6.3","6.3<a<=12.7","12.7<a<=19","19<a<=25.4","25.4<a<=38"]	
	,[Basis,"A","B","A","B","A","B","A","B","A","B","A","B"]	
	,["Ftu",["L",[B,420,435],[B,390,420],[B,390,420],[B,390,420],[B,390,420],[B,390,460]]	
		,["LT",[B,405,420],[B,370,400],[B,370,385],[B,355,370],[B,350,410],[B,350,410]]]
	,["Fty",["L",[B,280,295],[B,260,325],[B,260,325],[B,260,315],[B,260,315],[B,260,315]]	
		,["LT",[B,245,270],[B,245,270],[B,240,250],[B,230,245],[B,225,270],[B,225,270]]]
	,["Fcy",["L",[B,280,295],[B,260,275],[B,260,275],[B,260,275],[B,260,275],[B,260,315]]	
		,["LT",[B,285,300],[B,265,295],[B,260,280],[B,255,325],[B,245,295],[B,245,295]]]
	,["Fsu",["0",[B,215,230],[B,200,210],[B,200,210],[B,200,210],[B,200,210],[B,200,210]]]	
	,["Fbru15",["0",[B,530,540],[B,540,580],[B,535,555],[B,535,555],[B,530,580],[B,530,580]]]	
	,["Fbru20",["0",[B,610,630],[B,635,680],[B,635,680],[B,635,680],[B,635,680],[B,635,680]]]	
	,["Fbry15",["0",[B,410,420],[B,385,410],[B,375,405],[B,365,390],[B,350,380],[B,350,380]]]	
	,["Fbry20",["0",[B,490,505],[B,475,505],[B,460,485],[B,445,480],[B,430,465],[B,430,465]]]	
	,["e%",["L",[B,11,0],[B,11,0],[B,11,0],[B,11,0],[B,10,0],[B,10,0]]]	
	,["E",["0",[B,74500,74500],[B,74500,74500],[B,74500,74500],[B,74500,74500],[B,74500,74500],[B,74500,74500]]]	
	,["Ec",["0",[B,75800,75800],[B,75800,75800],[B,75800,75800],[B,75800,75800],[B,75800,75800],[B,75800,75800]]]	
	,["G",["0",[B,28300,28300],[B,28300,28300],[B,28300,28300],[B,28300,28300],[B,28300,28300],[B,28300,28300]]]	
	,["μ","0.33"]	
    ]
    ,[["MMPDS-04","7050","AMS4050","Plate","T7451","inch","! Plate===PLATE !"]
	,["tb","0.250-1.500","1.501-2.000","2.001-3.000","3.001-4.000","4.001-5.000","5.001-6.000","6.001-7.000","7.001-8.000"]	
	,[Basis,"A","B","A","B","A","B","A","B","A","B","A","B","A","B","A","B"]	
	,["Ftu",["L",[B,74,76],[B,74,76],[B,73,75],[B,72,74],[B,71,73],[B,70,72],[B,69,72],[B,68,71]]	
		,["LT",[B,74,76],[B,74,76],[B,73,75],[B,72,75],[B,71,74],[B,70,73],[B,69,72],[B,68,71]]
		,["ST",[B,0,0],[B,0,0],[B,68,72],[B,68,71],[B,67,70],[B,66,69],[B,66,68],[B,65,67]]]
	,["Fty",["L",[B,64,67],[B,64,66],[B,63,66],[B,62,65],[B,61,65],[B,60,63],[B,59,62],[B,58,63]]	
		,["LT",[B,64,66],[B,64,66],[B,63,66],[B,62,65],[B,61,64],[B,60,62],[B,59,62],[B,58,61]]
		,["ST",[B,0,0],[B,0,0],[B,59,61],[B,57,60],[B,57,60],[B,57,59],[B,56,58],[B,55,58]]]
	,["Fcy",["L",[B,63,64],[B,62,64],[B,61,64],[B,60,63],[B,58,61],[B,57,59],[B,56,59],[B,55,57]]	
		,["LT",[B,66,68],[B,67,69],[B,66,69],[B,65,68],[B,64,67],[B,63,66],[B,60,63],[B,59,62]]
		,["ST",[B,0,0],[B,0,0],[B,63,66],[B,63,66],[B,63,66],[B,62,64],[B,60,63],[B,59,62]]]
	,["Fsu",["L",[B,43,44],[B,44,45],[B,43,45],[B,44,45],[B,43,45],[B,43,45],[B,44,46],[B,44,46]]	
		,["LT",[B,42,43],[B,43,44],[B,43,44],[B,43,45],[B,43,45],[B,43,45],[B,44,46],[B,44,46]]
		,["ST",[B,0,0],[B,0,0],[B,0,0],[B,0,0],[B,0,0],[B,0,0],[B,0,0],[B,0,0]]]
	,["Fbru15",["L",[B,107,110],[B,109,112],[B,108,111],[B,107,111],[B,107,111],[B,105,110],[B,107,112],[B,103,108]]	
		,["LT",[B,109,112],[B,111,114],[B,110,113],[B,109,113],[B,108,113],[B,107,112],[B,109,114],[B,107,112]]
		,["ST",[B,0,0],[B,0,0],[B,0,0],[B,0,0],[B,0,0],[B,0,0],[B,0,0],[B,0,0]]]
	,["Fbru20",["L",[B,140,145],[B,142,146],[B,141,144],[B,140,144],[B,138,144],[B,137,142],[B,136,143],[B,132,138]]	
		,["LT",[B,140,144],[B,142,146],[B,141,145],[B,141,145],[B,139,145],[B,138,144],[B,139,146],[B,137,143]]
		,["ST",[B,0,0],[B,0,0],[B,0,0],[B,0,0],[B,0,0],[B,0,0],[B,0,0],[B,0,0]]]
	,["Fbry15",["L",[B,86,89],[B,89,92],[B,89,93],[B,90,94],[B,90,95],[B,91,94],[B,84,89],[B,83,87]]	
		,["LT",[B,87,89],[B,90,92],[B,89,94],[B,90,95],[B,90,95],[B,91,94],[B,85,90],[B,84,88]]
		,["ST",[B,0,0],[B,0,0],[B,0,0],[B,0,0],[B,0,0],[B,0,0],[B,0,0],[B,0,0]]]
	,["Fbry20",["L",[B,101,104],[B,104,107],[B,104,109],[B,104,109],[B,105,110],[B,105,108],[B,99,105],[B,98,102]]	
		,["LT",[B,103,106],[B,106,110],[B,106,111],[B,106,111],[B,106,111],[B,106,110],[B,99,105],[B,98,103]]
		,["ST",[B,0,0],[B,0,0],[B,0,0],[B,0,0],[B,0,0],[B,0,0],[B,0,0],[B,0,0]]]
	,["e(S-basis)",["L",[B,10,0],[B,10,0],[B,9,0],[B,9,0],[B,9,0],[B,8,0],[B,7,0],[B,6,0]]	
		,["LT",[B,9,0],[B,9,0],[B,8,0],[B,6,0],[B,5,0],[B,4,0],[B,4,0],[B,4,0]]
		,["ST",[B,0,0],[B,0,0],[B,3,0],[B,3,0],[B,3,0],[B,3,0],[B,3,0],[B,3,0]]]
	,["E","10300"]
	,["Ec","10600"]
	,["G","3900"]
	,["Ој","0.33"]
	,["w","0.102"]
	,["C","0.23"]
	,["Btu","91"]
	,["a10^6","12.800"]
    ]
    ,[["MMPDS-04","7075","AMS4044","Plate","T62","inch","! Plate===PLATE !"]
	,["tb","0.250-1.500","1.501-2.000","2.001-3.000"]	
	,["Basis","A","B","A","B"]	
	,["Ftu",["L",[B,74,76],[B,74,76],[B,73,75]]	
		,["LT",[B,78,80],[B,78,80],[B,77,79]]
		,["ST",[B,0,0],[B,0,0],[B,0,0]]]
	,["Fty",["L",[B,65,67],[B,66,68],[B,64,65]]	
		,["LT",[B,67,69],[B,68,70],[B,67,69]]
		,["ST",[B,0,0],[B,0,0],[B,0,0]]]
	,["Fcy",["L",[B,70,72],[B,70,72],[B,68,70]]	
		,["LT",[B,70,72],[B,71,73],[B,68,71]]
		,["ST",[B,0,0],[B,0,0],[B,0,0]]]
	,["Fsu",["0",[B,43,44],[B,44,45],[B,44,45]]]	
	,["Fbru15",["0",[B,117,120],[B,117,120],[B,116,119]]]	
	,["Fbru20",["0",[B,145,148],[B,145,148],[B,143,147]]]	
	,["Fbry15",["0",[B,97,100],[B,100,103],[B,100,103]]]	
	,["Fbry20",["0",[B,114,118],[B,117,120],[B,117,120]]]	
	,["e(S-basis)",["LT",[B,9,0],[B,7,0],[B,6,0]]]	
	,["E","10300"]	
	,["Ec","10600"]	
	,["G","3900"]	
	,["μ","0.33"]	
	,["w","0.101"]	
    ]
    ,[["SRM","AISI 301","None","SHEET","1/4 Hard","mm","! SHEET===Sheet !"]
	,["tb","None"]	
	,["Basis","A","B"]	
	,["Ftu",["L",[B,845,889]]	
		,["LT",[B,841,875]]]
	,["Fty",["L",[B,475,572]]	
		,["LT",[B,462,565]]]
	,["Fcy",["L",[B,303,372]]	
		,["LT",[B,489,606]]]
	,["Fsu",["0",[B,455,475]]]	
	,["Fbru15",["0",[B,0,0]]]	
	,["Fbru20",["0",[B,1805,1881]]]	
	,["Fbry15",["0",[B,0,0]]]	
	,["Fbry20",["0",[B,847,1027]]]	
	,["e%",["L",[B,0,0]]	
		,["LT",[B,25,0]]]
	,["E",["L",[B,186030,186030]]	
		,["LT",[B,192920,192920]]]
	,["Ec",["L",[B,179140,179140]]	
		,["LT",[B,186030,186030]]]
	,["G",["0",[B,73000,73000]]]	
	,["μ",["0",[B,0,27,0,27]]]	
    ]
    ,[["SRM","AISI 301","None","SHEET","1/2 Hard","mm","! SHEET===Sheet !"]
	,["tb","a<=0.4","a>0.4"]	
	,["Basis","A","B","A","B"]	
	,["Ftu",["L",[B,971,1040],[B,971,1040]]	
		,["LT",[B,978,1047],[B,978,1047]]]
	,["Fty",["L",[B,641,758],[B,641,758]]	
		,["LT",[B,634,723],[B,634,723]]]
	,["Fcy",["L",[B,420,475],[B,420,475]]	
		,["LT",[B,689,799],[B,689,799]]]
	,["Fsu",["0",[B,531,565],[B,531,565]]]	
	,["Fbru15",["0",[B,0,0],[B,0,0]]]	
	,["Fbru20",["0",[B,2042,2136],[B,2042,2136]]]	
	,["Fbry15",["0",[B,0,0],[B,0,0]]]	
	,["Fbry20",["0",[B,1151,1302],[B,1151,1302]]]	
	,["e%",["L",[B,0,0],[B,0,0]]	
		,["LT",[B,15,0],[B,18,0]]]
	,["E",["L",[B,179140,179140],[B,179140,179140]]	
		,["LT",[B,192920,192920],[B,192920,192920]]]
	,["Ec",["L",[B,179140,179140],[B,179140,179140]]	
		,["LT",[B,186030,186030],[B,186030,186030]]]
	,["G",["0",[B,72000,72000],[B,72000,72000]]]	
	,["μ",["0",[B,0,27,0,27],[B,0,27,0,27]]]	
    ]
    ]
    f = open('.\\otl.txt', 'w')
    f.write("\n"+str(Mcard[0]))
    for im in range(1,len(Mcard)):
      print(im)
      f.write("\n m="+str(im))
      if Mcard[im][0][1]== Material and Mcard[im][0][4] == Temper:
        for it in range(1,len(Mcard[im][1])):
          f.write("\n t="+str(it))
          if Mcard[im][1][it]==tb:
            for ib in range(1, 3):
                f.write("\n b="+str(ib))
                for ig in range(1,len(Mcard[im][3])):
                  f.write("\n"+" "+str(Mcard[im][2][ib])+" "+str(Mcard[im][3][ig][0])+" -> "+str(Mcard[im][3][ig][it][ib]))
                  if Mcard[im][2][ib]==Basis and Mcard[im][3][ig][0]==Grain:
                    f.write(" --------------- is!")
                    Ftu=Mcard[im][3][ig][it][ib]*1000
                    if Mcard[im][0][5] == "mm": Ftu=Ftu/6.89
    print(Mcard)
#    f = open('.\\otl.txt', 'a')
#    f.write(str(Mcard))?????????????????
#    for k in range(0,len(Mcard)):
#        for j in range(0,len(Mcard[k])):
#            f.write("\n"+str(Mcard[k][j]))
    f.close()
    return Ftu
